plugins {
    id 'java'
    id 'application'
    id 'com.github.spotbugs' version '1.7.1'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '1.0.1'
    id 'net.ltgt.apt' version '0.21'
    id 'com.github.ksoichiro.console.reporter' version '0.6.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    def jmcVersion = '7.1.0-SNAPSHOT'
    implementation "org.openjdk.jmc:org.openjdk.jmc.flightrecorder.configuration:${jmcVersion}"
    implementation "org.openjdk.jmc:org.openjdk.jmc.rjmx:${jmcVersion}"
    implementation "org.openjdk.jmc:org.openjdk.jmc.rjmx.services.jfr:${jmcVersion}"
    implementation "org.openjdk.jmc:org.openjdk.jmc.ui.common:${jmcVersion}"

    implementation 'org.apache.commons:commons-lang3:3.8.1+'
    implementation 'org.eclipse.core:runtime:3.10.0+'
    implementation 'org.nanohttpd:nanohttpd:2.3.1+'
    implementation 'com.google.dagger:dagger:2.21'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.0.0-beta1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.21'

    def jettyVersion = '9.4.17.v20190418'
    implementation "org.eclipse.jetty.websocket:websocket-api:${jettyVersion}"
    implementation "org.eclipse.jetty.websocket:websocket-server:${jettyVersion}"

    implementation 'com.google.code.gson:gson:2.8.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.1'
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.25.1'
    testImplementation 'org.mockito:mockito-inline:2.25.1'
}

mainClassName = 'es.andrewazor.containertest.JMXClient'

jib {
    from {
        image = 'gcr.io/distroless/java:11'
    }
    to {
        image = 'andrewazores/container-jmx-client'
    }
    container {
        useCurrentTimestamp = true
        ports = ['9091']
        jvmFlags = [
            '-Dorg.openjdk.jmc.common.security.manager=es.andrewazor.containertest.jmc.SecurityManager',
            '-Dcom.sun.management.jmxremote.rmi.port=9091',
            '-Dcom.sun.management.jmxremote=true',
            '-Dcom.sun.management.jmxremote.port=9091',
            '-Dcom.sun.management.jmxremote.ssl=false',
            '-Dcom.sun.management.jmxremote.authenticate=false',
            '-Dcom.sun.management.jmxremote.local.only=false',
            '-Djava.rmi.server.hostname=jmx-client'
        ]
    }
}

tasks.build.dependsOn tasks.jib

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

spotbugs {
  toolVersion = '4.0.0-beta1'
  sourceSets = [sourceSets.main]
  spotbugsTest.enabled = false
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
        html.destination file("${buildDir}/spotbugs.html")
    }
}

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: [
                        '**/*Dagger*',
                        '**/*_Factory*/**',
                        '**/*_Provide*/**',
                        '**/*_MembersInjector.class',
                        'es/andrewazor/containertest/jmc/**',
                        'es/andrewazor/containertest/**/*Module.class'
                    ])
            }))
    }
}

test.finalizedBy jacocoTestReport
